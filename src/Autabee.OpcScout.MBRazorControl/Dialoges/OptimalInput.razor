@using System.Xml;
@using Opc.Ua;

@if (Type == typeof(short))
{
    <MudNumericField Label=@Label T="short"
                 Value=@((short)DataValue)
                 ValueChanged=UpdateValue />
}
else if (Type == typeof(ushort))
{
    <MudNumericField Label=@Label T="ushort"
                 Value="@((ushort)DataValue)"
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(int))
{
    <MudNumericField Label=@Label T="int"
                 Value=@((int)DataValue)
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(uint))
{
    <MudNumericField Label=@Label T="uint"
                 Value=@((uint)DataValue)
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(Int64))
{
    <MudNumericField Label=@Label T="Int64"
                 Value=@((Int64)DataValue)
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(UInt64))
{
    <MudNumericField Label=@Label T="UInt64"
                 Value=@((UInt64)DataValue)
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(float))
{
    <MudNumericField Label=@Label T="float"
                 Value="@((float)DataValue)"
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(double))
{
    <MudNumericField Label=@Label T="double"
                 Value="@((double)DataValue)"
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(DateTime))
{
    <MudDatePicker Label=@Label
               Date=@((DateTime)DataValue)
               DateChanged="UpdateValue" />
}
else if (Type == typeof(byte))
{
    <MudNumericField Label=@Label T="byte"
                 Value=@((byte)DataValue)
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(sbyte))
{
    <MudNumericField Label=@Label T="sbyte"
                 Value=@((sbyte)DataValue)
                 ValueChanged="UpdateValue" />
}
else if (Type == typeof(Guid))
{
    <MudTextField Label=@Label T="string"
              Value=@(Value)
              ValueChanged="UpdateValue" />
}
else if (Type == typeof(XmlElement))
{
    <MudTextField Label=@Label T="string"
              Value="Value"
              ValueChanged="UpdateValue" />
}
else if (Type == typeof(NodeId))
{
    <MudTextField Label=@Label T="string"
              Value="Value"
              ValueChanged="UpdateValue" />
}
else
{
    <MudTextField Label=@Label T="string"
              Value="Value"
              ValueChanged="UpdateValue" />
}

@code {
    [Parameter]
    public Type Type { get; set; }
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public string Value { get; set; }
    [Parameter]
    public object DataValue { get; set; }
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    protected void UpdateValue<T>(T value)
    {
        DataValue = value;
        Value = value.ToString();
        ValueChanged.InvokeAsync(Value);
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (string.IsNullOrEmpty(Value))
        {
            DefaultValueChanged();
        }
        else
        {
            UpdateDataValueChanged(Value);
        }
    }

    protected void DefaultValueChanged()
    {
        switch (Type.Name)
        {
            case "Int16":
                DataValue = (short)0;
                break;
            case "UInt16":
                DataValue = (ushort)0;
                break;
            case "Int32":
                DataValue = (int)0;
                break;
            case "UInt32":
                DataValue = (uint)0;
                break;
            case "Int64":
                DataValue = (Int64)0;
                break;
            case "UInt64":
                DataValue = (UInt64)0;
                break;
            case "Float":
                DataValue = (float)0;
                break;
            case "Double":
                DataValue = (double)0;
                break;
            case "DateTime":
                DataValue = DateTime.MinValue;
                break;
            case "Byte":
                DataValue = (byte)0;
                break;
            case "SByte":
                DataValue = (sbyte)0;
                break;
            case "Guid":
                DataValue = Guid.Empty;
                break;
            case "XmlElement":
                DataValue = string.Empty;
                break;
            case "NodeId":
                DataValue = new NodeId();
                break;
            case "Boolean":
                DataValue = false;
                break;
            default:
                throw new Exception("Type not supported");
        }
        ValueChanged.InvokeAsync(DataValue.ToString());
    }
    protected void UpdateDataValueChanged(string value)
    {
        switch (Type.Name)
        {
            case "Int16":
                DataValue = Convert.ToInt16(value);
                break;
            case "UInt16":
                DataValue = Convert.ToUInt16(value);
                break;
            case "Int32":
                DataValue = Convert.ToInt32(value);
                break;
            case "UInt32":
                DataValue = Convert.ToUInt32(value);
                break;
            case "Int64":
                DataValue = Convert.ToInt64(value);
                break;
            case "UInt64":
                DataValue = Convert.ToUInt64(value);
                break;
            case "Float":
                DataValue = Convert.ToSingle(value);
                break;
            case "Double":
                DataValue = Convert.ToDouble(value);
                break;
            case "DateTime":
                DataValue = Convert.ToDateTime(value);
                break;
            case "Byte":
                DataValue = Convert.ToByte(value);
                break;
            case "SByte":
                DataValue = Convert.ToSByte(value);
                break;
            case "Guid":
                DataValue = new Guid(value);
                break;
            case "XmlElement":
                DataValue = value;
                break;
            case "NodeId":
                DataValue = new NodeId(value);
                break;
            default:
                throw new Exception("Type not supported");

        }
    }
}
