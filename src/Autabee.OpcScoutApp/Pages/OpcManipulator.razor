@using Autabee.Communication.ManagedOpcClient;
@using Autabee.OpcScout.RazorControl
@using Opc.Ua;
@using Autabee.Utility.Messaging;
@using Autabee.OpcScoutApp.Data;

@inject OpcScoutPersistentData controlBackend
@inject IJSRuntime _jsRuntime
@inject InMemoryLog logger
@page "/Opc/Manipulation"

<div class="ManipulatorForm">
    <!--Node Browser-->
    
    <div class="OpcNodeBrowserItem Viewport">
        <h3>Browser</h3>
        <div class="InnerItem OpcNodeBrowser">
            <NodeBrowser Model="nodeBrowser" />
        </div>
    </div>

    <div class="OpcNodeViewItem Viewport">
        <h3>Node View</h3>
        <div class="InnerItem">
            <NodeView Model="nodeViewerModel" />
        </div>
    </div>


    <div class="ReadWrite Viewport mid-ViewPort">

        <div class="Viewportheader">
            <button @onclick="()=>OpenLog()">logs</button>
            <button @onclick="()=>OpenReadWrite()">read/write</button>
        </div>

        <div class="InnerItem">
            @if (log)
                @foreach (var item in logger.Messages.Where(o => (((ushort)o.message.Level & (ushort)MessageFilter.Debug) != 0)).Reverse())
                {
                    <div class="logitem logitem-@item.message.Level.ToString()">
                        <span class="logitemtime">[@item.message.Time.TimeOfDay.ToString("hh':'mm':'ss") @item.message.Level.ToString()]</span>
                        <span class=@item.MessageClass>@item.message.ToString()</span>
                        @if (item.MultiLine || item.message.ToString().Length> 70)
                        {
                            @if (item.ShowFullMessage)
                            {
                                <button @onclick="()=>item.ShowFullMessage=false"><icon class="mdi mdi-eye" /></button>
                            }
                            else
                            {
                                <button @onclick="()=>item.ShowFullMessage=true"><icon class="mdi mdi-eye-off" /></button>
                            }

                        }

                    </div>
                }
            else if (readwrite)
            {

            }
        </div>
    </div>

    <div class="Subscriptions Viewport mid-ViewPort">
        <h3>Subscriptions</h3>
        <div class="InnerItem">
            <SubscriptionView SubscriptionViewModel="@subscriptionViewModel" />
        </div>
    </div>

    <div class="Macros Viewport">
        <h3>Macros</h3>
        <div class="InnerItem">
        </div>
    </div>

</div>

@code {
    public NodeBrowserModel nodeBrowser;
    public NodeViewModel nodeViewerModel = new NodeViewModel();
    public SubscriptionViewModel subscriptionViewModel;

    bool log = true;
    bool readwrite = false;

    protected override void OnInitialized()
    {
        nodeBrowser = new NodeBrowserModel(){ Clients    = controlBackend.clients };
        
        subscriptionViewModel = new SubscriptionViewModel(controlBackend.subscriptionNodes);
        if (controlBackend.observing != null) nodeViewerModel.UpdateSelected(this, controlBackend.observing);
        logger.Information("Open Manipulator");
        base.OnInitialized();
        nodeBrowser.OnSelectedChanged += UpdateSelected;
        nodeBrowser.OnAddSubscriptionRequest += subscriptionViewModel.AddSubscription;
        nodeBrowser.OnClientDisconnect += DisconnectClient;
        nodeBrowser.OnNodeRead += (sender, args) => { logger.Log(args); };
        logger.MessageUpdate += Logger_MessageUpdate;
    }

    private void OpenLog()
    {
        log = true;
        readwrite = false;
    }
    private void OpenReadWrite()
    {
        log = false;
        readwrite = true;
    }

    private void UpdateSelected(object sender, ScannedNodeModel selected)
    {
        nodeViewerModel.UpdateSelected(this, selected);
        controlBackend.observing = selected;
    }


    private void Logger_MessageUpdate(object sender, LogMessage e)
    {
        StateHasChanged();
    }
    private void DisconnectClient(object sender, OpcUaClientHelperApi client)
    {
        client.Disconnect();
        subscriptionViewModel.RemoveSubscriptions(client);
        controlBackend.clients.Remove(controlBackend.clients.First(o => o.Item1 == client));
        StateHasChanged();
    }
}

