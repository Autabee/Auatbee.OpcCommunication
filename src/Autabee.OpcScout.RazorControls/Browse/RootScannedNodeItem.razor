@using Autabee.Communication.ManagedOpcClient;


<ContextMenuTrigger MenuId="OpcBrowserNodeContext" Data="Client">
    <div class="Root-Node">
        @if(Client.Connected){
            <span class="node-text">@Client.GetConnectedServer()?.ApplicationName</span>
        }
        else
        {
            <span class="node-text">@Client.ApplicationDescription.ApplicationName</span>
        }
        <div class="node-actions">
            <button class="mdi mdi-lan-disconnect" @onclick=Disconnect />
        </div>
    </div>
</ContextMenuTrigger>

@if (Client.Connected)
{
    <div class="node-set">
    @if (ScannedNodes != null && ScannedNodes.Count >= 0)
    {
        @foreach (var node in ScannedNodes)
        {
            
            <ScannedNodeItem ScannedNodeModel="@node" depth="0" Browser="Browser" />
            
        }
    }
    </div>
}
@code {
    [Parameter]
    public NodeBrowserModel Browser { get; set; }
    [Parameter]
    public AutabeeManagedOpcClient Client { get; set; }

    [Parameter]
    public List<ScannedNodeModel> ScannedNodes { get; set; } = new List<ScannedNodeModel>();

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        InvokeAsync(Initialize);
        Browser.OnStateUpdateRoot += UpdateRoot;
    }

    public void Initialize()
    {
        if (Client.Connected && ScannedNodes.Count == 0)
        {
            var scan = Client.BrowseRoot();
            var nodes = Client.ReadNodes(scan);
            InvokeAsync(StateHasChanged);
            for (var i = 0; i < scan.Count; i++)
            {
                var result = new ScannedNodeModel(scan[i], Client, nodes[i]);
                result.GetChildren();
                ScannedNodes.Add(result);
            }
            InvokeAsync(StateHasChanged);
        }
    }

    public void UpdateRoot(object sender, AutabeeManagedOpcClient client)
    {
        if (client == Client)
        {
            ScannedNodes.Clear();
            StateHasChanged();
            Initialize();
        }
    }

    public void Disconnect()
    {
        Browser.Disconnect(Client);
    }
}


